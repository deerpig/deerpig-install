


* Agile Manifesto
* Remote Manifesto

* The Waterfall

#+BEGIN_SRC dot :file img/waterfall.png :noweb yes :exports results
digraph h {
  <<dot-style>>

  rankdir=LR;
  splines=ortho;

  node      [fixedsize="true",height=".60",width="1.7",fillcolor="#56B4E9:0.5:#8EC9E9",gradientangle=90,fontcolor="#FFFFFF",shape=box]
  req       [label="requirements"]
  design    [label="design", pos="30,30"]
  imp       [label="implementation"]
  verify    [label="verification"]
  maint     [label="maintainence"]

 { rank=min; req;}
 { rank=sink; design;}
 { rank=min; imp; }
 { rank=sink; verify; }
 { rank=min; maint; }

  req    -> design;
  design -> imp ;
  imp    -> verify ;
  verify -> maint ;
}
#+END_SRC

#+RESULTS:
[[file:img/waterfall.png]]


** Normative References
:url: https://en.wikipedia.org/wiki/Waterfall_model

* The Chicken and the Pig

/Learning Agile/ Andrew Stellman & Jennifer Greene
2015 O'Reilly Media

#+begin_quote
A Pig and a Chicken are walking down the road.

The Chicken says: “Hey Pig, I was thinking we should open a restaurant!”

Pig replies: “Hm, maybe; what would we call it?”

The Chicken responds: “How about ‘ham-n-eggs’?”

The Pig thinks for a moment and says: “No, thanks. I’d be committed,
but you’d only be involved!”[4]


[4] Just to be clear: a committed “pig” cares about the project’s
success more than he cares about anything else in his professional
life. There are a lot of other things in his personal life -- like his
family, for example -- that he usually cares more about. If that’s not
the case, it’s actually a problem with the team’s mindset, and it will
interfere with sustainable pace.

 -- p97
#+end_quote

* Iterative vs Incremental

#+begin_quote
An iterative process is one that makes progress through successive
refinement. A development team takes a first cut at a system, knowing
it is incomplete or weak in some (perhaps many) areas. They then
iteratively refine those areas until the product is satisfactory. With
each iteration the software is improved through the addition of
greater detail.

An incremental process is one in which software is built and delivered
in pieces. Each piece, or increment, represents a complete subset of
functionality. The increment may be either small or large, perhaps
ranging from just a system’s login screen on the small end to a highly
flexible set of data management screens. Each increment is fully coded
and tested, and the common expectation is that the work of an
iteration will not need to be revisited.

-- Mike Cohn, /User Stories Applied: For Agile Software Development/
   Pearson Education, 2004.
#+end_quote


* Teams

Teams are made up of 2-8 people, with the average being closer to
4-6.  In a Scopic organization, a Team is called a =shop= and is a
formal designation of a holon with an identity of it's own.  For this
reason =shops= must be registered (self-registered) that will
establish a unique identity, a bramble, and ruleset that will be used
to manage it.  Teams are persistent, they can be created, but once
created they are part of the blockchain -- so they can be disbanded,
suspended, disolved, fractured, absorbed, merged or even abandoned,
but they can not be unmade.

Shops can be legal entities in their own right, shops can own
property, generate revenue, disperse funds, hire services, purchase
goods.  Shops, and the holons that own the shop are also accountable, 
legally, ethically and morally.

** Shop Sizes

There are limits on shop sizes -- they must conform to the =human
scale group pattern=

** 

For larger issues or issues that contain many different moving parts,
you'll be likely working in a team. This team will typically consist
of a =backend developer=, a =frontend developer=, a =UX designer= and a
=product manager=.

   - Teams have a shared responsibility to ship the issue in the
     planned release.
      - If the team suspects that they might not be
        able to ship something in time, the team should escalate /
        inform others as soon as possible. A good start is informing
        your lead.
      - It's generally preferable to ship a smaller
        iteration of an issue, than ship something a release later.
    - Consider starting a Slack channel for a new team, but remember
      to write all relevant information in the related issue(s). You
      don't want to have to read up on two threads, rather than only
      one, and Slack channels are not open to the greater GitLab
      community.





* Working & Prioritizing
* Overflow

Tasks that aren't completed in a sprint and /overflow/ into the next
sprint.

* Daily Scrum Meeting

*NOTE:* 2016-08-30 Obviously we have not started doing this, but I
came across the [[https://wiki.openmrs.org/display/RES/Daily+Scrum+Meeting][OpenMRS daily scrum meeting]] and thought that this is a
good fit with what I hope to do. The text in this section is using the
OpenMRS page as a starting point from which we'll slowly adapt.  I've
taken part in the weekly meetings held on IRC for One Laptop Per
Child, and they seem to work well.

The daily scrum meeting is a focused, 15-minute meeting for people
contributing to the core development of Chenla Saltmine to come
together and provide updates in the development process.

** What to Report in the Scrum:

Each developer answers the following questions:

  - What did you accomplish since the last meeting?
  - What do you plan to accomplish before the next meeting?
  - What are your blockers?
  - Discussion points - Items that are not blockers but need a group
    decision on after the daily scrum is completed

** Where to meet

The bi-weekly Chenla Forum takes place on the #chenla channel on
freenode -- the public is welcome to join this meeting where new
features and progress on the project as a whole will be discussed.

The daily team scrum meeting will be on irc.chenla.org and
mm.chenla.org in #scrum.

** Meeting schedule

The daily scrum meeting occurs at . 

Be sure to add the correct days and times into your calendars with a
10-minute reminder prior to each meeting, so you have time to prepare
your daily report.

  | UTC Meeting Times |
  |-------------------|
  | time time time    |
 
** Email Reminder

If you wish to recieve an email reminder of meetings -- sent about 1
hour before the meetings begin please email mailto:brad@chenla.org and
put in the subject something to the effect "remind me about scrum
meetings" or "remind me about forum meetings"

[[http://www.timeanddate.com/worldclock/converter.html][Time Zone Converter]]

** Making the meeting efficient

 - Be available at the proper start time.
 - Write your update 10 minutes before the daily scrum meeting.
    - Set your calendar reminder alarm for 10 minutes before the daily
      scrum meeting. When the alarm occurs, write up your work and
      prepare for the meeting.
    - The update should be a summary of the following:
      - What you worked on during the previous day
      - What you are currently working on today
      - What you will continue to work on after the meeting has
        finished
      - A list of any blockers, or items that are slowing down your
        progress
  - Stay focused on the IRC channel window.
      - If the daily scrum meeting were in person, we'd all be
        standing up. That's not easy to do on IRC, so it's important
        to pay attention.
      - The biggest delay in the meeting occurs when we focus on other
        windows on our computer. Either close or minimize those
        windows before the meeting.
  - Save all problem solving for the end of the meeting.
      - Updates, output, blockers, and change-of directions will go
        out quickly during the scrum from each individual. Afterwards,
        the group will go over problem-solving for the blockers that
        need to be resolved.
  - Be honest about blockers!
      - Blockers are issues that are getting in the way of doing other
        work, or challenging issues that are taking up a lot of time.
        The main reason for the daily scrum meeting is to share
        information about blockers and resolve them together.  If you
        have worked on the same problem for more than 1 hour (even if
        you think you know the solution!) state it as a blocker.


* Chenla Mailing Lists

Will dig these up -- clean out the spam and get things restarted
again.

* Chenla IRC & MatterMost

Server will be http://irc.chenla.org and http://mm.chenla.org
respectively.

http://wwww.irchelp.org/irchelp/irctutorial.html

* Chenla Pastebin

Will install [[http://sayakb.github.io/sticky-notes/pages/home/][Sticky Notes]] and the server will be: http://paste.chenla.org

* Remote Kanban Board

I am a big believer in the power of physical kanban boards -- I've
tried a number of electronic ones and they just don't have the emotive
power of a punch of colored pieces of paper taped to a board!

However, we are a distributed project -- so an idea I have at the
moment is to set up a webcam with a motion sensor of the kanban board
at the office at prekleap once an hour and keep a feed of the camera 
onm a web page.

We can then create a simple way of notifiying whoever is the person
(KanBan Keeper?) to move things around as needed.

The idea is that during scrum meetings, everyone should have a feed of
the board running next to their irc client so that we can make
collective updates during meetings.

It might turn out to be a dumb idea -- but I'd like to give it a try.

* Diagram definitions                                              :noexport:
** Global GraphViz styles

#+BEGIN_SRC dot :noweb-ref dot-style :exports none
  node[style="filled",fontname="Dejavu Sans",fontcolor="black",fontsize=14];
  edge[fontname="Dejavu Sans",fontsize=9];
#+END_SRC
