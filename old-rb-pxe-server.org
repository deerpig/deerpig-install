
#   -*- mode: org; fill-column: 60 -*-

#+TITLE:  Basic PXE Server on Ubuntu Server
#+STARTUP: showall
#+TOC: headlines 4
#+PROPERTY: filename
#+LINK: pdf   pdfview:~/proj/chenla/hoard/lib/

[[https://img.shields.io/badge/made%20by-Chenla%20Institute-999999.svg?style=flat-square]] 
[[https://img.shields.io/badge/class-runbook-56B4E9.svg?style=flat-square]]
[[https://img.shields.io/badge/type-work-0072B2.svg?style=flat-square]]
[[https://img.shields.io/badge/status-wip-D55E00.svg?style=flat-square]]
[[https://img.shields.io/badge/licence-MIT%2FCC%20BY--SA%204.0-000000.svg?style=flat-square]]

bibliography:~/proj/chenla/hoard/bib.bib

[[[../../index.org][top]]] [[[../index.org][up]]]

* Basic PXE Server on Ubuntu Server
  :PROPERTIES:
  :CUSTOM_ID: 
  :Name:      /home/deerpig/proj/deerpig/runbooks/rb-pxe-server.org
  :Created:   2018-07-18T10:50@Prek Leap (11.642600N-104.919210W)
  :ID:        81d60373-f1ef-470a-8ab6-0d683f1588a8
  :VER:       585157868.617256729
  :GEO:       48P-491193-1287029-15
  :BXID:      proj:MTV4-2056
  :Class:     primer
  :Type:      work
  :Status:    wip
  :Licence:   MIT/CC BY-SA 4.0
  :END:

Install a basic PXE Server on Ubuntu Server LTS 16.04.

This server isn't needed that often.  Most provisioning of new
OpenStack compute nodes and such will be done using MAAS.  But there
will be times when you'll need to PXE boot stand alone boxes without
having to invoke lot's of infrastructure.  In our case, the Dell Cloud
Servers we use can't install from a usb drive, they have to boot from
the network.  So to build a MAAS server, which will provision and
instal conjure-up and juju which will install and set up an OpenStack
cluster we need to install Ubuntu on one server first.  This runbook
describes how to set up a simple PXE server to do that.

Eventually we will turn this into an ansible playbook, so that we can
set up a temporary PXE server when the need arises in the future.

** Install Ubuntu Server

Do a bog standard minimal install of ubuntu server from a
usb.

** Configure the Network Interface

The PXE server needs to be on a network with no other dhcp server.

Open the network =interfaces= file:

#+begin_src sh
sudo emacs /etc/network/interfaces
#+end_src

We need to set a static IP for the box.

And change eth0 to whatever bizzare interface naming scheme that the
box was installed with.

Edit as follows:

#+begin_example 
# The loopback network interface
auto lo
iface lo inet loopback
# The primary network interface
auto eth0
iface eth0 inet static
address 192.168.100.105
netmask 255.255.255.0
gateway 192.168.1.1
dns-nameservers 8.8.8.8
#+end_example

Restart the network

#+begin_src sh
sudo /etc/init.d/networking restart
#+end_src

Run =ifconfig= to check that the changes took effect.

** Install DHCP, TFTP and NFS

Install DHCP, TFTP and NFS:

#+begin_src sh
sudo apt-get install apache2 inetutils-inetd tftpd-hpa isc-dhcp-server
#+end_src

** Configure DHCP Server

Edit the DHCP config file:

#+begin_src sh
sudo emacs /etc/default/dhcp3-server
#+end_src

Add or edit the network interface that will be used, which is eth0 or
something like .

#+begin_example bash
INTERFACES="enp2s0"
#+end_example

#+begin_src sh
sudo emacs /etc/dhcp/dhcpd.conf
#+end_src

Add the following at the end of the file:

#+begin_example
allow booting;
allow bootp;
option option-128 code 128 = string;
option option-129 code 129 = text;
next-server 192.168.1.105;
filename "pxelinux.0";
#+end_example

Start DHCP Service:

#+begin_src sh
sudo /etc/init.d/isc-dhcp-server start
#+end_src

** Configure TFTP Server

TFTP is like ftp, but doesn't require authentication.  The server will
listen for PXE clients on the network.  When it sees a box doing a
network boot, it will send the network package that was chosen from
the boot menu.

First open:

#+begin_src sh
sudo emacs /etc/inetd.conf
#+end_src

Edit as follows:

#+begin_example
tftp dgram udp wait root /usr/sbin/in.tftpd /usr/sbin/in.tftpd -s /var/lib/tftpboot
#+end_example

Now open:

#+begin_src sh
sudo emacs /etc/default/tftpd-hpa
#+end_src

Add the following to the end of the file:

#+begin_example sh
RUN_DAEMON="yes"
OPTIONS="-l -s /var/lib/tftpboot"
#+end_example

Enable boot service for =inetd= to start on boot and start =tftpd=.

#+begin_src sh
sudo update-inetd --enable BOOT
sudo service tftpd-hpa start
#+end_src

Check status

#+begin_src sh
sudo systemctl status tftpd-hpa
#+end_src

You should see something like the following:

#+begin_example
tftpd-hpa.service - LSB: HPA's tftp server
   Loaded: loaded (/etc/init.d/tftpd-hpa; bad; vendor preset: enabled)
   Active: active (running) since Wed 2018-07-18 18:03:29 +07; 22min ago
     Docs: man:systemd-sysv-generator(8)
   CGroup: /system.slice/tftpd-hpa.service
           └─4190 /usr/sbin/in.tftpd --listen --user tftp --address :69 --secure /var/lib/tftpboot

Jul 18 18:03:29 trinket systemd[1]: Starting LSB: HPA's tftp server...
Jul 18 18:03:29 trinket tftpd-hpa[4180]:  * Starting HPA's tftpd in.tftpd
Jul 18 18:03:29 trinket tftpd-hpa[4180]:    ...done.
Jul 18 18:03:29 trinket systemd[1]: Started LSB: HPA's tftp server.
Jul 18 18:13:22 trinket systemd[1]: Started LSB: HPA's tftp server.
#+end_example

** Configure PXE boot files

Create files used by PXE that must be in the tftp root directory and
copy filed from syslinux in the "/usr/lib/syslinux" to
"/var/lib/tftpboot".

#+begin_src sh
sudo mkdir /var/lib/tftpboot
sudo touch /var/lib/tftpboot/pxelinux.cfg
sudo mkdir -p /var/lib/tftpboot/Ubuntu/16.04.4/
sudo cp /usr/lib/syslinux/vesamenu.c32 /var/lib/tftpboot/
sudo cp /usr/lib/syslinux/pxelinux.0 /var/lib/tftpboot/
#+end_src

Edit the PXE Server config file:

Edit pxelinux.cfg/default

#+begin_src sh
sudo emacs /var/lib/tftpboot/pxelinux.cfg/default
#+end_src

Add the following:

#+begin_example sh
label linux
        kernel ubuntu-installer/amd64/linux
        append ks=http://10.0.1.1/ks.cfg vga=normal initrd=ubuntu-installer/amd64/initrd.gz
ramdisk_size=16432 root=/dev/rd/0 rw  --
#+end_example

** Add Ubuntu Server 16.04 Images to PXE Server

Download the ISO file into the /mnt directory. Change the file name to
the latest image:

#+begin_src sh
sudo cd /tmp
sudo wget http://releases.ubuntu.com/16.04.4/ubuntu-16.04.4-server-amd64.iso
#+end_src

Mount the ISO file and copy all the files to the TFTP diretory:

#+begin_src sh
sudo mount -o loop /tmp/ubuntu-16.04.4-server-amd64.iso /mnt/
#+end_src

Now cd into the mounted iso, and copy files to tftp.

#+begin_src sh
cd /mnt
sudo cp -fr install/netboot/* /var/lib/tftpboot/
#+end_src

Create directory called ubuntu in the apache root document directory
and then copy all the files from the Ubunto ISO into the directory:

#+begin_src sh
sudo mkdir /var/www/html/ubuntu
sudo cp -fr /mnt/* /var/www/html/ubuntu/
#+end_src

** Configure NFS Server to Export ISO Contents

Setup Installation Source Mirrors via NFS protocol. You can also use
http and ftp for Installation Source Mirrors. Here I have used NFS to
export ISO contents.

Edit =/etc/exports=

#+begin_src sh
sudo emacs /etc/exports
#+end_src

To look something like the following:

#+begin_example
/var/lib/tftpboot/Ubuntu/14.04/amd64 *(ro,async,no_root_squash,no_subtree_check)
#+end_example

Export and start NFS.

#+begin_src sh
sudo exportfs -a
sudo /etc/init.d/nfs-kernel-server start
#+end_src




** Network Boot

Now, connect the box you want to install on, and the PXE server to a
switch that is not running DHCP.

Reboot the box that will be installed and choose Network Boot from the
bios.

** References

  - [[https://www.ostechnix.com/how-to-install-pxe-server-on-ubuntu-16-04/][How to install PXE Server on Ubuntu 16.04]]
  - [[https://www.maketecheasier.com/configure-pxe-server-ubuntu/][Configure PXE Server In Ubuntu 14.04]]
