#   -*- mode: org; fill-column: 60 -*-

#+TITLE: Creating a new static website
#+STARTUP: showall
#+TOC: headlines 4
#+PROPERTY: filename
:PROPERTIES:
:CUSTOM_ID: 
:Name:      /home/deerpig/proj/deerpig/deerpig-install/rb-new-website-install.org
:Created:   2016-06-29T12:12@Wat Phnom (11.5733N17-104.925295W)
:ID:        33bde4be-47a5-4665-a2ce-ba85a59639df
:VER:       558131291.469893445
:GEO:       48P-491193-1287029-15
:BXID:      proj:BBT7-6704
:Type:      runbook
:Status:    wip
:Licence:   MIT/CC BY-SA 4.0
:END:

[[https://img.shields.io/badge/made%20by-Deerpig-999999.svg?style=flat-square]] 
[[https://img.shields.io/badge/type-runbook-0072B2.svg?style=flat-square]]
[[https://img.shields.io/badge/status-wip-D55E00.svg?style=flat-square]]
[[https://img.shields.io/badge/licence-MIT%2FCC%20BY--SA%204.0-000000.svg?style=flat-square]]


* Introduction

This document describes how to create a new static web site
using either org-publish or jekyll on Debian.

** 1. Install Apache2

First install Apache2 and a Virtual Host for the new site:

  See: [[./rb-lamp-server.org][Lamp Server Runbook]].

** 2. Create A Record for Domain

Second, create A record for the subdomain that points to
site:

#+begin_example
A  site.example.com   10.0.0.100  1
#+end_example

* On Remote Server

** 1 Create Directory

SSH into the server and create a directory called =repo= in
a user account and a directory for the new git repo.

#+begin_src sh
mkdir -p ~/repos/site.example.com
#+end_src

** 2. Initialize Git Repo

Initialize a new bare git repository.

#+begin_src sh
cd ./site.example.com
git init --bare
#+end_src

** 3. Create file =post-receive=

Create a new file in ./hooks called /post-receive/
which will either automatically build the website and move
the files to =document root= using jekyll or =rsync= to copy
the files to =document root=.

File: *~/repo/site.example.com/hooks/post-receive*

#+begin_src sh
emacs ~/repo/site.example.com/hooks/post-receive
#+end_src

Include the following text, depending on if you are building
a Jekyll site or a Static site:

*** 3.1 Jekyll Site

For Jekyll Sites, use the following:

#+begin_source sh
#!/bin/bash -l
# Use Jekyll to build and deploy website
# No trailing slashes for directories
GIT_REPO=$HOME/repos/site.example.com
TMP_GIT_CLONE=$HOME/tmp/site.example.com
PUBLIC_WWW=/var/www/html/site.example.com/public_html

git clone $GIT_REPO $TMP_GIT_CLONE

# Use Jekyll to build the site and copy files to document root
jekyll build --source $TMP_GIT_CLONE --destination $PUBLIC_WWW

# Delete tmp files
rm -Rf $TMP_GIT_CLONE
exit
#+end_source

*** 3.3 Static Site

For Static Sites, use the following:

#+begin_source sh
#!/bin/bash -l
# Use rsync to copy the site to the server. 
# Use trailing slash so that contents are moved,
# not whole directories.
GIT_REPO=$HOME/repos/site.example.com/
TMP_GIT_CLONE=$HOME/tmp/site.example.com/
PUBLIC_WWW=/var/www/html/site.example.com/public_html/

git clone $GIT_REPO $TMP_GIT_CLONE

# Use rsync to copy files to document root
rsync -avzh  $TMP_GIT_CLONE $PUBLIC_WWW

# Delete tmp files
rm -Rf $TMP_GIT_CLONE
exit
#+end_source

** 4. Make the file executable

#+begin_src sh
chmod +x post-receive
#+end_src

** 5. Create web server directories

Follow the directions in the [[./rb-lamp-server.org][Lamp Runbook]] to create the
directories for the web site, and set permissions.


* On Local Machine

** 1. Create local directories

Create the local directories for the site.

#+begin_src sh
mkdir -p ~/proj/sites/site.example.com
#+end_src

** 2. Create New Jeykll Project 

Create a new Jekyll project or copy your existing code into
the new directory.

#+begin_src sh
cd ~/proj/sites/site.example.com
# skip the jekyll cmd if not a jekyll site
jekyll new site.example.com
#+end_src

** 3. Initialize the Git Repository

#+begin_src sh
git init
git add .
git commit -m "added files"
#+end_src

** 4. Create a =git remote= 

Create a =git remote= that points to the directory on the server.

#+begin_src sh
git remote add deploy deerpig@example.com:~/repos/site.pnsa.edu.kh
#+end_src

** 5. Push Deploy

You can now manage staging and commits in magit in emacs.
When you Push from Magit it will run the deployment script
on the server which automatically invokes Jekyll and builds
the site from git the Git repo.

Alternately, you can deploy, (push changes and rebuild jekyll) using
bash:

#+begin_src sh
git push deploy master
#+end_src

* Workflow

Putting it all together, we get the following workflow:

 - Edit files, save
 - Magit-status
 - Stage/Commit
 - Push deploy 

If you are running Jekyll on the server to build the site
then you're done.  But if you are using org-publish or are
using jekyll build locally, then:

 - M-x deploy (to run the deploy shell script for the site).

* Set up Nikola

If you are not using Ruby every day, install Jekyll can be a
nightmare.  So let's try Nikola which is written in Python
to see if it might be a bit more sane install environment.

 - [[https://getnikola.com/getting-started.html][Getting Started | Nikola]]

First make sure you have at least python3, pip and
virtualenv installed.

#+begin_src sh 
sudo apt-get install python3 python-pip
#+end_src

check that you have python 3.x

#+begin_src sh
python3 --version
#+end_src

Install virtualenv and  virtualenvwrapper

#+begin_src sh
sudo pip install virtualenv --upgrade
sudo pip install virtualenvwrapper
#+end_src

Add the following to your .bashrc

#+begin_src sh
export WORKON_HOME=${HOME}/proj/lala
if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then
    source /usr/local/bin/virtualenvwrapper.sh
elif [ -f /usr/bin/virtualenvwrapper.sh ]; then
   source /usr/bin/virtualenvwrapper.sh
fi
#+end_src

Reload .bashrc

#+begin_src sh
source ~/.bashrc
#+end_src

Create a local directory for a project and set up a
virtualdev project. I'm using ~/proj/lala

#+begin_src sh
mkdir ~/proj/lala
cd ~/proj/lala

virtualenv -p /usr/bin/python3 nikola
cd nikola
workon nikola
pip install --upgrade setuptools pip
pip install --upgrade "Nikola[extras]"
#+end_src

Use the cmd 'deactivate' to escape from the virtualenv and
then 'workon' to choose which env you want to work in.

