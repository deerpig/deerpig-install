#   -*- mode: org; fill-column: 60 -*-

#+TITLE: Install New LAMP Server
#+STARTUP: showall
#+TOC: headlines 4
#+PROPERTY: filename
:PROPERTIES:
:CUSTOM_ID: 
:Name:      /home/deerpig/proj/deerpig/deerpig-install/rb-lamp-server.org
:Created:   2017-09-06T12:04@Prek Leap (11.642600N-104.919210W)
:ID:        6b31c842-f952-4536-a3d3-398b7f6b93b8
:VER:       557946357.533612152
:GEO:       48P-491193-1287029-15
:BXID:      proj:WKE2-7607
:Type:      runbook
:Status:    wip
:Licence:   MIT/CC BY-SA 4.0
:END:

[[https://img.shields.io/badge/made%20by-Deerpig-999999.svg?style=flat-square]] 
[[https://img.shields.io/badge/type-runbook-0072B2.svg?style=flat-square]]
[[https://img.shields.io/badge/status-wip-D55E00.svg?style=flat-square]]
[[https://img.shields.io/badge/licence-MIT%2FCC%20BY--SA%204.0-000000.svg?style=flat-square]]


* Introduction

This file walks you through setting up a LAMP server.

It has been adapted from linode's excellent documentation for setting
up a LAMP server on Debian: [[https://www.linode.com/docs/web-servers/lamp/lamp-on-debian-8-jessie/][LAMP on Debian 8 (Jessie)]]


First install a new VM.  See the [[./rb-new-vm-install.org][New-VM Runbook]] for how.


After you have ssh'd into your new VM, check you have a fully
qualified hostname:

#+begin_src sh
hostname
hostname -f
#+end_src

Do an update and upgrade

Debian:

#+begin_src sh
sudo apt-get update && sudo apt-get upgrade
#+end_src

* Apache

** 1. Install Apache2

#+begin_src sh
sudo apt-get install apache2
#+end_src

** 2. Edit the main Apache configuration file and turn off the =KeepAlive= setting:

File: */etc/apaches/apache2.conf*

#+begin_src sh
sudo emacs /etc/apache2/apache2.conf
#+end_src

#+begin_example
KeepAlive  Off
#+end_example

** 3. Edit */etc/apache2/mods-available/mpm_prefork.conf*

File: */etc/apache2/mods-available/mpm_prefork.conf*

#+begin_src sh
sudo emacs /etc/apache2/mods-available/mpm_prefork.conf
#+end_src

#+begin_example
# prefork MPM
# StartServers: number of server processes to start
# MinSpareServers: minimum number of server processes which are kept spare
# MaxSpareServers: maximum number of server processes which are kept spare
# MaxRequestWorkers: maximum number of server processes allowed to start
# MaxConnectionsPerChild: maximum number of requests a server process serves

<IfModule mpm_prefork_module>
        StartServers              4
        MinSpareServers           20
        MaxSpareServers           40
        MaxRequestWorkers         200
        MaxConnectionsPerChild    4500
</IfModule>
#+end_example

** 4. On Debian 8

On Debian 8, the event module is enabled by default. This should be
disabled, and the prefork module enabled:

#+begin_src sh
sudo a2dismod mpm_event
sudo a2enmod mpm_prefork
#+end_src

** 5. Restart Apache:

#+begin_src sh
sudo systemctl restart apache2
#+end_src

* Configure Virtual Hosts

** Create directories for websites and websitesâ€™ logs

There can be as many virtual hosts files as needed.

#+begin_src sh
sudo mkdir -p /var/www/html/example.com/public_html
sudo mkdir /var/www/html/example.com/logs
#+end_src

Shampoo, rinse, repeat for as many domains as needed.

** 2. Create an =example.com.conf= file in =/etc/apache2/sites-available=

#+begin_src sh
sudo emacs /etc/apache2/sites-available/example.com.conf
#+end_src

#+begin_example
<VirtualHost *:80>
     ServerAdmin webmaster@example.com
     ServerName example.com
     ServerAlias www.example.com
     DocumentRoot /var/www/html/example.com/public_html/
     ErrorLog /var/www/html/example.com/logs/error.log
     CustomLog /var/www/html/example.com/logs/access.log combined
</VirtualHost>
#+end_example

Shampoo, rinse, repeat for as many domains as needed.

** 3. Create symbolic link from =sites-available= to =sites-enabled= 

#+begin_src sh
sudo a2ensite example.com.conf
sudo a2ensite example.org.conf
#+end_src

To disable a site, use =a2dissite example.com=.


** 4. Point =000-default.conf= to new server root

Before you point your dns to the new server, change the default server
root to point to one of the virtual hosts that was just created.

File: */etc/apache2/sites-available/000-default.conf*

#+begin_source sh
sudo emacs /etc/apache2/sites-available/000-default.conf
#+end_source

#+begin_example
<VirtualHost *:80>
        # The ServerName directive sets the request scheme, hostname and port that                                                                                                             
        # the server uses to identify itself. This is used when creating                                                                                                                       
        # redirection URLs. In the context of virtual hosts, the ServerName                                                                                                                    
        # specifies what hostname must appear in the request's Host: header to                                                                                                                 
        # match this virtual host. For the default virtual host (this file) this                                                                                                               
        # value is not decisive as it is used as a last resort host regardless.                                                                                                                
        # However, you must set it for any further virtual host explicitly.                                                                                                                    
        #ServerName www.example.com                                                                                                                                                            

        ServerAdmin webmaster@example.com
        DocumentRoot /var/www/html/example.com/public_html
#+end_example

** 5. Restart Apache

#+begin_src
sudo systemctl restart apache2
#+end_src

** 6. Create DNS A Records for each virtual host

Log into whoever is registering your domain and create A records for
each domain that point to the public ip address:

#+begin_example
A  *                192.168.10.1  1
A  example.com      192.168.10.1  1
A  www.example.com  192.168.10.1  1
A  beta.example.com 192.168.10.1  1
#+end_example


** 7. Check that everything is working. 

At this point I usually create a test html file in each domain's
document root:

#+begin_src sh
sudo echo '<h1>example.com</h1>' > /var/www/html/example.com/public_html/index.html
sudo echo '<h1>beta.example.com</h1>' > /var/www/html/beta.example.com/public_html/index.html
#+end_src

Now check that everything is working.

First check that the default domain is working by using the ip
address:

#+begin_src sh
lynx http://192.168.10.0
#+end_src

Now if the A records have been created in DNS for the domain/s, then
you can check:

#+begin_src sh
lynx http://example.com
lynx http://beta.example.com
#+end_src

* MySQL

** 1. Install MySQL

#+begin_src sh
sudo apt-get install mysql-server
#+end_src

When the installation is complete, a curses interface will pop up and
prompt you to create a password for MySQL.  Do what you are told.

** 2. Run =mysql_secure_installation=

#+begin_src sh
sudo mysql_secure_installation
#+end_src

Answer =y= for all questions.  If you already have a sequre root
password, you don't need to change it.

** 3. Set up a MySQL database

Now you can creat a database and grant your users permissions to use
the database.

*** 3.1 Log in to MySQL

#+begin_src sh
mysql -u root -p
#+end_src

Enter the MySQL root pass when prompted.

*** 3.2 Create a database and set permissions

Create a database and grant your users permissions on it. Change the
database name (webdata) and username (username). Change the password
(password):

#+begin_src sh
create database webdata;
grant all on webdata.* to 'username' identified by 'password';
#+end_src

*** 3.3 Exist MySQL

#+begin_src sh
quit
#+end_src

* PHP

Yes, yes, I know that you really don't /want/ to use PHP, but if this
is what your customer wants... what can you do?

** 1. Install PHP5 and the PHP Extension and Application Repository

#+begin_src sh
sudo apt-get install php5 php-pear
#+end_src

** 2. Edit =/etc/php5/apache2/php.ini=

Open =/etc/php5/apache2/php.ini= and edit the following values. 

File: */etc/php5/apache2/php.ini*

#+begin_src sh
sudo emacs /etc/php5/apache2/php.ini
#+end_src

#+begin_example
error_reporting = E_COMPILE_ERROR|E_RECOVERABLE_ERROR|E_ERROR|E_CORE_ERROR
error_log = /var/log/php/error.log  
max_input_time = 30
#+end_example

** 3. Create php log directory

Create the log directory for PHP and give the Apache user ownership:

#+begin_src sh
sudo mkdir /var/log/php
sudo chown www-data /var/log/php
#+end_src
