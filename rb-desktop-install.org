#   -*- mode: org; fill-column: 60 -*-
#+TITLE: Bunsen Labs Desktop Installaton Notes
#+STARTUP: showall
#+PROPERTY: filename 'bunsen-install.org'
  :PROPERTIES:
  :Name: /home/deerpig/org/bunsen-install.org
  :Created: 2016-06-13T12:52@Wat Phnom (11.5733N17-104.925295W)
  :ID: 238cc479-376a-4040-9e06-750faf722dc7
  :URL:
  :END:
#+INCLUDE: ./inc/head.org
#+INCLUDE: ./inc/macros.org
#+INCLUDE: ./inc/links.org

{{{breadcrumbs}}}

#+HTML: <div class="outline-2" id="meta">
| *Author*  | Brad Collins <brad@chenla.org>             |
| *Date*    | {{{time(%Y-%m-%d %H:%M:%S)}}}              |
#+HTML: </div>

#+TOC: headlines 6

* Status of This Document

The latest version of this document is: src_sh[:results value]{git describe --abbrev=0 --tags}

#+HTML: <div class="notice notice-info">
*Changes since the last version*

#+HTML: <ul>

#+BEGIN_SRC sh :exports results :results value html :var TAG="v00.02.01"
  RES=`git log $TAG...HEAD --pretty="<li>%s</li>\n" -- rb-desktop-install.org`
  if [ -z $RES ]; then
    RES="<li>no changes</li>"
  fi
  echo $RES
#+END_SRC

#+RESULTS:
#+BEGIN_EXPORT html
<li>no changes</li>
#+END_EXPORT

#+HTML: </ul>
#+HTML: </div>

* Introduction

I've refined this guide over six clean installs on laptop
and desktop boxes.  It's still a work in progress, but it's
getting to the point where it's reasonably stable.

Set aside at least half a day to complete the basics -- a
lot of this is just the time to download and install stuff.
After the basic install and update you'll be installing
several gig of files.  And let's not forget it takes the
better part of an hour to config, make and make install
emacs.

* Desktop Install

** Bunsen Install

Do generic install from Live USB, when you reboot you'll get
an install script -- don't install everything they suggest.
Tried that once and it screwed things up, but use it to do
an apt-get update, upgrade and add the alternate repos they
suggest.

** Install Some Tools

Install an odd collection of packages.  Most of these
packages are needed to complete the installation and setup
of the system.  A few are here because I was too lazy to
find a better place to install them and wanted to make sure
that I didn't forget. 

#+begin_src sh
sudo apt-get install wget git-core surfraw openssh-server \
gdebi most xprintidle lxrandr dnsutils irssi libsqlite0 sqlite3 \
#+end_src

* Emacs
** Install Dependencies

Install graphics and dev libs:

#+begin_src sh
sudo apt-get install libxaw7-dev libxpm-dev libpng12-dev libtiff5-dev \
libgif-dev libjpeg62-turbo-dev libgtk2.0-dev libncurses5-dev libxml2 \
libxml2-dev librsvg2-dev libgtk-3-dev libwebkitgtk-3.0-dev 

sudo apt-get install libgnutls28-dev librsvg2-bin
#+end_src

Full install of texinfo, latex & tex and pandoc.  Texinfo is
needed by emacs, this will also install pdflatex which is
also needed by orgmode.

This will take a while -- well over a gigabyte

#+begin_src sh
sudo apt-get install texinfo texlive-base texlive-bibtex-extra latexmk pandoc
sudo apt-get install texlive-fonts-recommended texlive-fonts-extra
sudo apt-get install texlive-latex-base texlive-latex-extra \
texlive-latex-recommended texlive-science
#+end_src
  
Install GNU-Autotools

#+begin_src sh
sudo apt-get install autoconf automake
#+end_src

Install WebKitGTK

To enable webkit we still need a few more dependencies.

#+begin_src sh :dir /sudo::
# install depends
sudo apt-get install libgtk-3-dev #first
# configure: error: xwidgets requested but WebKitGTK+ not found
sudo apt-get install libwebkitgtk-dev
sudo apt-get install libwebkitgtk-3.0-dev

sudo apt-get install gnutls-dev
sudo apt-get install libwebkit2gtk-3.0-25 libwebkit2gtk-3.0-dev

#+end_src



#+RESULTS:

** Build Dependencies

Install the dependencies specified on the emacs package

#+begin_src sh :dir /sudo::  :results drawer
sudo apt-get -y install build-essential checkinstall
sudo apt-get -y build-dep emacs
#+end_src

#+RESULTS:
:RESULTS:
:END:

** Download Emacs from Github

Download Emacs source code from Github.  Be sure to pass the "--depth
1" flag to download just the more recent history of the files.

#+begin_src sh
git clone --depth 1 https://github.com/emacs-mirror/emacs.git
cd emacs
#+end_src

** Configure, Build & Install Emacs

Run the autogen and configure scripts. Note that with
"--prefix" you pass the path in which you'll want the files to be
installed.

I tried installing with Cario support but fonts got screwed
up as well as introducing window resdrawing problems when
frames were resized.

#+begin_src sh
./autogen.sh
./autogen.sh git 
./configure --with-modules --without-cairo --with-xwidgets \
--with-libxml2 --with-dbus --with-x-toolkit=gtk3
make
#+end_src

Make install as root

#+begin_src sh
sudo make install
#+end_src

** Install Graph Generators for Org Mode

Install Ditaa, PlantUML and GraphViz which are used by Orgmode

#+begin_src sh
sudo apt-get install ditaa graphviz
#+end_src

Download the PlantUML jar file from:

  :url: http://sourceforge.net/projects/plantuml/files/plantuml.jar/download

And then copy it to a place that can be used system-wide:

#+begin_src  sh
cd ~/Downloads
sudo cp ./plantuml.jar /usr/local/bin/
#+end_src

* Browsers
Poor =Conkeror= is no longer in development and Mozilla keeps
making it progressively harder to keep it working.  I now
have integrated =IceWeasel= as my primary browser.

My paying gig uses Google Apps suite, which which doesn't
work very well with firefox.  But it's no longer my go-to
browser.

** Install Firefox
:PROPERTIES:

:END:

Debian is finally including firefox again (instead of their
iceweasel branded version of firefox).  However, the version
included in the package is far behind the most recent.

Download Firefox 51:

  https://www.mozilla.org/en-US/firefox/new/?scene=2

Extract the file:

#+begin_src sh :dir ~/Downloads
tar xjf ./firefox-51.0.1.tar.bz2
#+end_src

#+RESULTS:

Remove any Firefox version installed in the /opt directory:

#+begin_src sh :dir /sudo::
sudo rm -r /opt/firefox
#+end_src

#+RESULTS:

Now move the firefox directory /opt

#+begin_src sh :dir /sudo::/home/deerpig/Downloads
sudo mv firefox /opt/firefox51
#+end_src

#+RESULTS:


“Backup” the old Firefox launcher:

#+begin_src sh :dir /sudo::
sudo mv /usr/bin/firefox /usr/bin/firefox-old
#+end_src

#+RESULTS:

Delete any existing symbolic links and create a symbolic
link to the new Firefox:

#+begin_src sh :dir /sudo::
rm /usr/bin/firefox
sudo ln -s /opt/firefox51/firefox /usr/bin/firefox
#+end_src

#+RESULTS:

We might have to change links in openbox to point to the new
version.  Search for "iceweasel" and replace with "firefox".

[[~/.config/openbox/rc.xml]]

[[~/.config/openbox/menu.xml]]

After editing, restart openbox from the menu.

** Set default browser system-wide

This will give you a menu to choose the browser.  If chrome
or another browser start popping up when you expect
something to open in firefox, run this command again.

#+begin_src sh
sudo update-alternatives --config x-www-browser
#+end_src

** Install Conkeror Web Browser (deprecated)

#+begin_src sh
sudo apt-get install conkeror conkeror-spawn-process-helper
#+end_src

XULRunner has been booted out by Mozilla, so we need to use Firefox
instead. 

#+begin_src sh
emacs ~/.bashrc_aliases
#+end_src

And add:

#+begin_src sh
alias conkeror='firefox -app /usr/share/conkeror/application.ini'
#+end_src 
** Install Google Chrome

Use IceWeasel, *not* Conkeror to open the following link:

 http://www.google.com/chrome/browser/desktop/index.html 

and follow instructions.  After installation is complete,
run on the command line:

#+begin_src sh
google-chrome
#+end_src

** Configure Browsers
*** Add DuckDuck Go As Default

 - Iceweasel: install Firefox DuckDuckGo Addon
 - Chrome: go to https://www.duckduckgo.com 
   right click on url, choose edit search engines
   click to make DuckDuckGo the default.

Make sure both Chrome & Iceweasel are set to restore tabs and settings
when starting up.
*** Install Firefox Plugins

I am using firefox sync, so if you add your browser to your
sync account all of the settings and plugins on your other
machines will autoinstall and configure.

The list of plugins I'm presently using are:

  - Adblock Plus :: it's obvious
  - Bottom UI :: moves nav bar to bottom of the screen so it
       works a bit more like the Conkeror mini-buffer which
       is meant to work like the emacs minibuffer.
  - Copy as Org-Mode :: copies links and pastes them using
       orgmode syntax.
  - DuckDuckGo Plus :: sets ddg as default browser.
  - Firemacs :: emacs keybindings!
  - Google Scholar Button :: which I use heavily to lookup
       bibtex citations.  It's worth installing this in
       Chrome as well.
  - Hide Tabbar :: toggles visability of tab bar so it works
       more like Conkeror.
  - Pinboard.in :: add bookmarks to Pinboard.in account.
  - Tab Groups :: restores this feature that used to be part
       of Firefox.
  - Video DownloadHelper :: obvious as well.

*** Install Keysnail

Keysnail is an interesting package that does what firemacs
does but is a lot closer to the functionality of Conkeror.

In fact, if you hide the tab bar, it feels a lot like
Conkeror. There is a lot more -- an init file that you can
edit like in Conkeror etc.

:HOME: [[https://github.com/mooz/keysnail/wiki][mooz/keysnail Wiki]] | Github
:SEE:    [[http://blog.binchen.org/posts/use-firefox-in-emacs-way-3.html][Use firefox in Emacs way]] | Chen's blog

#+begin_src sh :dir ~/Downloads
wget https://github.com/mooz/keysnail/raw/master/keysnail.xpi &
firefox keysnail.xpi &
#+end_src

#+begin_src sh :dir ~/Downloads
firefox &
#+end_src


#+RESULTS:

After restarting Firefox, you will get a dialogue for where
to create the init file.

If you ran the above code from the babel, babel will keep
waiting until you do an `M-g' and then firefox should
happily continue on in the background.

Now let's move that file into the .dotfiles directory and
create a symbolic link to the home directory.

#+begin_src sh
mv ~/.keysnail.js ~/.dotfiles/keysnail
ln -s ~/.dotfiles/keysnail ~/.keysnail.js
#+end_src

#+RESULTS:


Install the /tanything/ plugin.  Tanything is a /anything/,
/helm/ style way of browsing tabs.  Very cool stuff.

You should see a purple keysnail icon in your browser, right
click on the drop down arrow and choose the /Open Plugin
Manager/ to see available keysnail plugins, and find
/tanything/.  Right click and install from menu.

After installing and restarting Firefox /again/, we need to
add a keybinding so that /tanything/ opens the tab list
using `C-x b' (switch buffer list) which I have set up in
emacs to use helm.

Open the keysnail file:

 [[~/.dotfiles/keysnail]]

And add the following line to the bottom of the file.

#+begin_src js
key.setViewKey(['C-x', 'b'], function (ev, arg) { ext.exec("tanything", arg); }, 'タブを一覧表示', true);
#+end_src


* Install Jupyter

First install pip3 the python package installer:

#+begin_src sh
sudo apt-get install python3-pip
#+end_src

Now use pip3 to install Jupyter:

#+begin_src sh
sudo pip3 install jupyter
#+end_src


* Desktop Apps
** Install Guake

Guake is a pop-down terminal emulator.  I use Terminal for
persistent shell windows.  But if you need to do a quick
ping or install something, Guake pops up does it's thing and
then get' out the way.

:url: [[https://github.com/Guake/guake][Quake Home]] | Github

#+begin_src sh
sudo apt-get install guake
#+end_src

Put this in openbox autostart file to start it on startup.

#+begin_src sh
## Start Guake
guake &
#+end_src


Finally, go to preferences and set sane keybindings for copy
and paste:  SC-y and SM-w respectively.

** Install some Graphics Apps

Install Gimp Inkscape Blender & Viewnior

#+begin_src sh
sudo apt-get install gimp inkscape blender viewnior scribus
#+end_src


** Install some KDE Apps

krusader, kcolorchooser (part of kdegraphics), sane
& calibre

#+begin_src sh
sudo apt-get install krusader kdegraphics sane
#+end_src

** Install PDF/Ebook Apps

#+begin_src sh
sudo apt-get install okular okular-extra-backends calibre djview4
#+end_src

** Install media Apps

VLC is already installed, so install audacious for light
weight, music playing and clementine for my 2TB collection.

#+begin_src sh
sudo apt-get install clementine audacious
#+end_src

** Install Non-Free Apps
*** Install Viber Desktop

Install dependencies:

#+begin_src sh
sudo apt-get install libqt5gui5
#+end_src

Go to:

  https://www.viber.com/en/products/linux

Click on "Viber Debian (64 bit) and save.

#+begin_src sh
sudo gdebi ~/Downloads/viber.deb
#+end_src

Now fix the weird path:

#+begin_src sh
ln -s /opt/viber/Viber /usr/local/bin/viber
#+end_src

Change the Exec & Path as:

#+begin_src sh
sudo emacs /usr/share/applications/viber.desktop
#+end_src

Change the following:

#+begin_src sh
  Exec=viber
  Path=/opt/viber
#+end_src

When you open the app for the first time it will ask you for a
telephone number and then a code that will be sent your phone.

Fucking awful GUI....

*** Install Skype

The Skype client was suffering from serious bit rot.
Thankfully MS has finally decide to port the latest version
of Skype to Linux.  It's an alpha release (sigh) but
sometimes you gotta take what you can get...

Download and install the .deb file:

:url: https://community.skype.com/t5/Linux/bd-p/Linux
* Install Ruby Apps 
** Install Jekyll

#+begin_src sh
sudo apt-get install ruby ruby-dev rubygems
sudo gem install jekyll
#+end_src

Then follow the guide in [[./jekyll-new-site.org]]

** Install githubchart

Install github chart

Home: https://github.com/akerl/githubchart

#+begin_src sh
sudo apt-get install libcurl3-dev
#+end_src

#+begin_src sh
sudo gem install githubchart
#+end_src
* CLI
** Get SSH working
Move keys into place, or generate a new key-pair.

#+begin_src sh
cd ~
mkdir .ssh
chmod 700 ./.ssh
chmod 600 ./id_rsa
chmod 644 ./.ssh/authorized_keys
#+end_src

** Getting ssh-agent to work properly

If you use git many times a day as I now do it's a major
pain in the pass to have to keep entering your fucking ssh
passphrase.  It's easy to run ssh agent so the problem goes
away when using Bash but X11 keeps autostarting it when you
use Magit in Emacs.  Enough was enough.

You should have the following script in your .bashrc (or
possibly .bash_profile to autostart ssh-agent when you
start a bash-shell.

#+begin_src sh
SSH_ENV="$HOME/.ssh/environment"

function start_agent {
    echo "Initialising new SSH agent..."
    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
    echo succeeded
    chmod 600 "${SSH_ENV}"
    . "${SSH_ENV}" > /dev/null
    /usr/bin/ssh-add;
}

# Source SSH settings, if applicable

if [ -f "${SSH_ENV}" ]; then
    . "${SSH_ENV}" > /dev/null
    #ps ${SSH_AGENT_PID} doesn't work under cywgin
    ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent> /dev/null || {
        start_agent;
    }
else
    start_agent;
fi
#+end_src


Next install `exec-path-from-shell' from MELPA and add the
following in your .emacs.  I put it just above the settings
for Magit.

#+begin_src sh 
(require 'exec-path-from-shell)
(exec-path-from-shell-copy-env "SSH_AGENT_PID")
(exec-path-from-shell-copy-env "SSH_AUTH_SOCK")
#+end_src

To get magit in emacs to stop prompting for the passphrase:

#+begin_src sh 
sudo emacs /etc/X11/Xsession.options
#+end_src

And comment out `ssh-agent' so X11 doesn't start it
automatically when magit pushes.

#+begin_src sh
sudo emacs -nw  gnome-keyring-ssh.desktop 
#+end_src

and comment out:

#+begin_src sh
Exec=/usr/bin/gnome-keyring-daemon --start --components=ssh
#+end_src sh

try running the following:

#+begin_src sh
xfconf-query -c xfce-session -p /startup/ssh-agent/enabled -n -t bool -s false
#+end_src

You may have to log out or reboot for all the settings to work.
** Copy dotfiles and emacs stuff

I keep most of my config files in a directory called
".dotfiles" and then create symbolic links to "~/".  The
diectory is a git repo that I then use to sync between
five different machines.

#+begin_src sh
git clone deerpig@dev.chenla.org:/~repos/dotfiles
mv ~/dotfiles ~/.dotfiles
cd .dotfiles
#+end_src

Now remove the originals and link all the files in .files to
~/.

#+begin_src sh
cd ~/
ls ~/.dotfiles
rm <filename>
ln -s .dotfiles/<filename> .<filename>
#+end_src

** Possible Org-Mode Problems

The version of orgmode is downloaded via git.  I was
recently having a problem with timezones...

If something doesn't work, redownload and install clearn
version:

#+begin_src sh
cd ~/emacs-lisp
mv -R ./org-mode ./org-mode.bak./orf
git clone git://orgmode.org/org-mode.git
cd ./org-mode
make autoloads
#+end_src
** Add User to Wheel Group
It seems that BunsenLabs install scripts and kde sudo (used
by at least one gui package manager) require users to be in
the wheel group so....

#+begin_src sh
sudo groupadd wheel
sudo gpasswd -a deerpig wheel
#+end_src
* Mail
** Install fetchmail

#+begin_src sh
sudo apt-get install fetchmail procmail
#+end_src

You should already have linked your fetchmailrc from
.dotfiles now check the permissions

#+begin_src sh
chmod 600 ~/.fetchmailrc
#+end_src

Set the daemon

#+begin_src sh
sudo emacs /etc/default/fetchmail
#+end_src

change to START_DAEMON=yes

** Install ssmtp

Install ca-certificates.

#+begin_src sh
sudo apt-get instyall ca-certificates
sudo update-ca-certificates
#+end_src

Install ssmtp and mailutils

#+begin_src sh
sudo apt-get install ssmtp mailutils
#+end_src

Copy the ssmpt-conf file into place, or edit the default
config file to work like so

sudo emacs -nw /etc/ssmtp/ssmtp.conf

#+begin_src sh
root=brad@chenla.la
mailhub=smtp.gmail.com:587
RewriteDomain=chenla.la
FromLineOverride=YES
UseSTARTTLS=YES
TLS_CA_File=/etc/pki/tls/certs/ca-bundle.crt
AuthUser=brad@chenla.la
AuthPass=your-password
#Debug=YES
#+end_src

NOTE: be careful that there is new line or other text after
the password.  If the files ends at the end of the password
line you will get an authentication error.

sudo emacs -nw /etc/ssmtp/revaliases

#+begin_src sh
root::brad@chenla.la:smtp.gmail.com:587
deerpig::brad@chenla.la:smtp.gmail.com:587
#+end_src

#+begin_src sh
chmod 640 /etc/ssmtp/ssmtp.conf
chmod 640 /etc/ssmtp/revaliases
#+end_src

Now this is where things get weird -- it won't work.

If you get an error: /ssmtp: Cannot open mailhub:25/

This is the workaround:

Install postfix, which uninstalls ssmtp and mailutils
then uninstall postfix and reinstall ssmtp and mailutils.

it should now work....  postfix sets up a lot of little
stuff during the install, but leaves some in place when you
uninstall that ssmtp seems to need to work.

I had to do this a couple of times on the latest machine I
set up on, but eventually it works.


** Install recoll & helm-recoll

I use recoll to index all of my pdfs, and act as a text
search for my org and project files.  This works very well
with helm-recoll in emacs.

First install recoll

#+begin_src sh
sudo apt-get install recoll
#+end_src

You can then start recoll from the command line and get a
nice gui and index everything from there.  But it's better
to have a bit more fine grained control over what we are
searching.  I keep a library of files that are mostly pdf in
one directory, then keep my org files in another and use
another directory for projects, which are git repos that
include code and other bits.  So we will create separate
indexes for each.

:SEE: https://bitbucket.org/medoc/recoll/wiki/MultipleIndexes

Now create the index directories and the recoll.config file
for each index.

#+begin_src sh
mkdir ~/.recoll/{doc,proj,org}
touch ~/.recoll/doc/recoll.conf
touch ~/.recoll/proj/recoll.conf
touch ~/.recoll/org/recoll.conf
#+end_src

#+begin_src sh
echo "topdirs = /home/deerpig/org" > ~/.recoll/org/recoll.conf
echo "topdirs = /home/deerpig/proj" > ~/.recoll/proj/recoll.conf
echo "topdirs = /media/deerpig/Transcend/htdocs" > ~/.recoll/doc/recoll.conf
#+end_src

Now do initial indexing.  At present, htdocs is 188GB and
pushing 30k of files, so it might need to run overnight.

#+begin_src sh
recollindex -c ~/.recoll/org
recollindex -c ~/.recoll/proj
recollindex -c ~/.recoll/doc
#+end_src

Create cronjob to reindex each directory, five minutes apart
starting at 2:05am every day.

#+begin_src sh
crontab -e
#+end_src

#+begin_src sh
5 2 * * *  recollindex -c ~/.recoll/org
10 2 * * * recollindex -c ~/.recoll/proj
15 2 * * * recollindex -c ~/.recoll/doc
#+end_src

See the helm-recoll section of .emacs-helm for setting up
helm-recoll.

** Install Mu & Mu4e

Install dependencies

#+begin_src sh
sudo apt-get install libgmime-2.6-dev libxapian-dev gnutls-bin \\
guile-2.0-dev html2text xdg-utils
#+end_src

Now download and install mu (which includes mu4e.

#+begin_src sh
cd ~/tmp
git clone https://github.com/djcb/mu.git
cd ./mu
autoreconf -i && ./configure && make
sudo make install
#+end_src


** Install mbsync

#+begin_src sh
sudo apt-get install isync
sudo apt-get install ca-certificates
#+end_src

Create a file called ~/.mbsyncrc


#+begin_src sh
# ACCOUNT INFORMATION
IMAPAccount gmail
Host imap.gmail.com
User MYEMAIL@gmail.com
PassCmd "security find-generic-password -s mbsync-gmail-password -w"
# UseIMAPS yes
# AuthMechs LOGIN
AuthMechs PLAIN
SSLType IMAPS
# SSLVersions SSLv3
CertificateFile /usr/local/etc/openssl/certs/gmail.crt
CertificateFile /usr/local/etc/openssl/certs/google.crt
CertificateFile /usr/local/etc/openssl/certs/Equifax.crt

# THEN WE SPECIFY THE LOCAL AND REMOTE STORAGE
# - THE REMOTE STORAGE IS WHERE WE GET THE MAIL FROM (E.G., THE
#   SPECIFICATION OF AN IMAP ACCOUNT)
# - THE LOCAL STORAGE IS WHERE WE STORE THE EMAIL ON OUR COMPUTER

# REMOTE STORAGE (USE THE IMAP ACCOUNT SPECIFIED ABOVE)
IMAPStore gmail-remote
Account gmail

# LOCAL STORAGE (CREATE DIRECTORIES with mkdir -p Maildir/gmail)
MaildirStore gmail-local
Path ~/Maildir/gmail/
Inbox ~/Maildir/gmail/inbox

# CONNECTIONS SPECIFY LINKS BETWEEN REMOTE AND LOCAL FOLDERS
#
# CONNECTIONS ARE SPECIFIED USING PATTERNS, WHICH MATCH REMOTE MAIl
# FOLDERS. SOME COMMONLY USED PATTERS INCLUDE:
#
# 1 "*" TO MATCH EVERYTHING
# 2 "!DIR" TO EXCLUDE "DIR"
# 3 "DIR" TO MATCH DIR
#
# FOR INSTANCE IN THE SPECIFICATION BELOW:
#
# gmail-inbox gets the folder INBOX, ARCHIVE, and everything under "ARCHIVE*"
# gmail-trash gets only the "[Gmail]/Trash" folder and stores it to the local "trash" folder

Channel gmail-inbox
Master :gmail-remote:
Slave :gmail-local:
Patterns "INBOX" "Arch*"
Create Both
Expunge Both
SyncState *

Channel gmail-trash
Master :gmail-remote:"[Gmail]/Trash"
Slave :gmail-local:trash
Create Both
Expunge Both
SyncState *

Channel gmail-sent
Master :gmail-remote:"[Gmail]/Sent Mail"
Slave :gmail-local:sent
Create Both
Expunge Both
SyncState *

# GROUPS PUT TOGETHER CHANNELS, SO THAT WE CAN INVOKE
# MBSYNC ON A GROUP TO SYNC ALL CHANNELS
#
# FOR INSTANCE: "mbsync gmail" GETS MAIL FROM 
# "gmail-inbox", "gmail-sent", and "gmail-trash"
#
Group gmail
Channel gmail-inbox
Channel gmail-sent
Channel gmail-trash
#+end_src


* Chef Dev Toolchain

Install chef, virtualbox and vagrant so that we can spin up
virtual machines as a sandbox for writing and testing chef
recipes.  It's not as painful as it sounds :)


Before you begin -- reboot the machine and have a look in
the bios and ensure that Virtualization is turned on.  This
has caught me two times -- it's better to check and be sure.

** Install VirtualBox
If you haven't done so before, add the "contrib" component
to /etc/apt/sources.list, for example:

#+begin_src sh
# Debian 8 "Jessie"
deb http://httpredir.debian.org/debian/ jessie main contrib
#+end_src

Now install via apt-get:

#+begin_src sh
sudo apt-get install linux-headers-$(uname -r|sed 's,[^-]*-[^-]*-,,') virtualbox
#+end_src

Test to see if it's working:

#+begin_src sh
VBoxManage --version
#+end_src

** Install Vagrant

#+begin_src sh
wget https://releases.hashicorp.com/vagrant/1.8.5/vagrant_1.8.5_x86_64.deb
sudo dpkg -i vagrant_1.8.5_x86_64.deb
#+end_src

Test to see if it's working:

#+begin_src sh
vagrant --version
#+end_src

** Install Chef Development Kit

#+begin_src sh
wget https://packages.chef.io/stable/debian/8/chefdk_0.17.17-1_amd64.deb
sudo dpkg -i chefdk_0.17.17-1_amd64.deb
#+end_src

Use the Chef Dev Kit =shell-init= command to modify the
current shell environment to use these paths the /opt paths
it installed into.

#+begin_src sh
echo 'eval "$(chef shell-init bash)"' >> ~/.bash_profile
#+end_src

#+RESULTS:

Reload

#+begin_src sh :results silent
source $HOME/.bash_profile
#+end_src

#+RESULTS:

Now check to see if the new paths are working.

#+begin_src sh
which ruby
#+end_src

#+RESULTS:
: /usr/bin/ruby

You should see /opt/chefdk/embedded/bin/ruby

** Running Vagrant in VirtualBox

- create dir
- kitchen init
- kitchen create
- kitchen list
- kitchen login
- kitchen destroy

* Cucumber Install

Create a Gemfile:

#+begin_src ruby
source  'https://rubygems.org'

group :test do
  gem 'gherkin'
  gem 'cucumber'
  gem 'rspec-expectations'
end
#+end_src

and then while in that directory run 

#+begin_src sh
bundle install
#+end_src

* Configure Desktop

If you are running multiple desktops, including something
like this in your ~/.config/openbox/autostart file.

This file is /not/ in the .dotfiles git repo.  I had tried
to include autostart other openbox config files in the
.dotfile repo but there were too many small hardware
differences between different computers I am running.

** Xrandr Display Settings

#+begin_src sh
## Video Setup
  xrandr --output HDMI-1 --mode 1920x1080
  xrandr --output VGA-1  --mode 1280x1024
  xrandr --output VGA-1  --right-of HDMI-1
#+end_src

** Keymappings

 :url: /usr/share/X11/xkb/rules/base.lst


*** Remap CapLock to Ctrl

Yes, I know this is a popular thing to do, and I have done
it several times over the past decade or more, but I've
never managed to actually /use/ it...  I should get around
to sqwapping and retraining my fingers, but not today.

*** Disable Caps Lock and Insert Keys

Different keyboards require different tweaks -- at the
moment I disable capslock everywhere and on full keyboards I
also disable the insert key which I seem to accidently hit
ten times a day....

#+begin_src sh
## disable capslock -- keycode 105
setxkbmap -option caps:none
## disable insert key
xmodmap -e "keycode 118 ="
#+end_src

*** Remap R-Ctrl to Menu

I have one keyboard that doesn't have a <menu> key which I map
to helm-command-prefix in emacs.  Since I don't use the
right ctrl or alt keys when I type, remap the right ctrl:

#+begin_src sh
## on keyboards without a <menu> key remap right ctrl to menu 
xmodmap -e "keycode 105 = Menu"
#+end_src

** Openbox rc.xml Keybindings

There are a lot of default keybindings here.  These are the
one's I have remapped or created.

*** Open File Manager (Krusader)

#+begin_src xml
    <keybind key="W-f">
      <action name="Execute">
        <startupnotify>
          <enabled>false</enabled>
          <name>File Manager</name>
        </startupnotify>
        <command>krusader</command>
      </action>
    </keybind>
#+end_src

*** Open Terminal

#+begin_src xml
    <keybind key="W-t">
      <action name="Execute">
        <startupnotify>
          <enabled>false</enabled>
          <name>Terminal</name>
        </startupnotify>
        <command>x-terminal-emulator</command>
      </action>
    </keybind>
#+end_src

*** Open Firefox (Iceweasel)

#+begin_src xml
    <keybind key="W-w">
      <action name="Execute">
        <startupnotify>
          <enabled>true</enabled>
          <name>Web Browser</name>
        </startupnotify>
        <command>iceweasel</command>
      </action>
    </keybind>
#+end_src

*** Start Editor (Emacs)

#+begin_src xml
    <keybind key="W-e">
      <action name="Execute">
        <startupnotify>
          <enabled>false</enabled>
          <name>Editor</name>
        </startupnotify>
        <command>emacs</command>
      </action>
    </keybind>
#+end_src

*** Open Org Capture out of emacs

See .emacs for code this is running.

#+begin_src xml
    <keybind key="W-r">
      <action name="Execute">
        <startupnotify>
          <enabled>true</enabled>
          <name>Emacs Capture</name>
        </startupnotify>
        <command>emacsclient -ne "(make-capture-frame)"</command>
      </action>
    </keybind>
#+end_src

*** Start Music Player (Clemintine)

#+begin_src xml
    <keybind key="W-m">
      <action name="Execute">
        <startupnotify>
          <enabled>false</enabled>
          <name>Mediaplayer</name>
        </startupnotify>
        <command>clementine</command>
      </action>
    </keybind>
#+end_src

*** Start KColor Chooser

#+begin_src xml
    <keybind key="W-c">
      <action name="Execute">
        <startupnotify>
          <enabled>true</enabled>
          <name>Colorchooser</name>
        </startupnotify>
        <command>kcolorchooser</command>
      </action>
    </keybind>
#+end_src

*** Start Bittorrent (Transmission)

#+begin_src xml
    <keybind key="W-b">
      <action name="Execute">
        <startupnotify>
          <enabled>true</enabled>
          <name>BitTorrent</name>
        </startupnotify>
        <command>transmission-gtk</command>
      </action>
    </keybind>
#+end_src

** Turn off touchpad on laptops

I don't think this works any more -- need to find out the best
way of doing this without having to install another gui
config tool.

#+begin_src sh
## Configure touchpad. See 'man synaptics' for more info.
synclient VertEdgeScroll=1 HorizEdgeScroll=1 TapButton1=1 2>/dev/null
#+end_src

** Set Wallpaper

In the menu find 'choose wallpaper'  and add the following
path:

  /usr/share/images/bunsen/wallpapers/default/

** Turn Off Screen Lock

Turning off the screen lock in the Power Management app
doesn't work.  Screen blanking is controlled by X but the
screen lock is controlled by light-locker.

To disable the lock:

#+begin_src  sh
sudo emacs /etc/xdg/autostart/light-locker.desktop
#+end_src

and add the following:

#+begin_src sh
Exec=light-locker --lock-after-screensaver 0
#+end_src sh

`0' disables locking.
** Edit OpenBox RC Files

I had tried to put all the OpenBox config files in a Git
repo -- but there are a number of variations required
between different hardware configs -- and BL is under active
development, so I've broken things by importing OpenBox
scripts that were only a week old!  So until BL has made a
first release, it's better to install whatever is the new
default and tweak it to taste.

:NOTE: Needs to be expanded.

- autostart 
  - set up screen resolution
  - disable caps-lock key
- rc.xml
  - number of desktops & default desktop
  - edit keyboard shortcuts to open apps
  - edit menus
- menus.xml
- pipemenus
** Get Rid of the App Launcher
Open

#+begin_src sh
emacs ~/.config/tint2/tint2rc
#+end_src
  
and comment out all of the 'launcher_item_app' entries.
** Set up Colors & Themes 
 - set colors and fonts in Terminal app
 - obconf
** Fonts

Copy fonts into any of the following directories:

#+begin_src sh
/usr/share/fonts
/usr/share/X11/fonts
/usr/local/share/fonts
~/.fonts
#+end_src

** Download Google Fonts

Google has over 800 open source fonts!  You can download the
lot as a zip file, but better to clone the repo locally and
then link the ofl directory in the repo to ~/.fonts.

Periodically, pull any new fonts using git.

#+begin_src sh
cd ~/proj/
git clone git@github.com:google/fonts.git
ln -s /home/deerpig/.fonts/ofl /home/deerpig/proj/fonts/ofl
#+end_src


And then make Debian aware of the new fonts.  If you run
this as sudo it will make fonts available to all users, but
it won't look at any fonts in user home directories.  I'm
the only user on the machine, and when I use root I don't
need anything fancy.  So I first run as sudo, and then as
deerpig.

#+begin_src sh
fc-cache -f -v
#+end_src




* Install ibus

For Chinese and Japanese language input support:

#+begin_src sh
sudo apt-get install ibus ibus-chewing ibus-pinyin ibus-anthy
#+end_src

Reconfigure locals

#+begin_src sh
sudo dpkg-reconfigure locales
#+end_src




* Apache2

Install apache2

#+begin_src sh
sudo apt-get install apache2
#+end_src

Now let's activate user directories.

#+begin_src sh
cd /etc/apache2/mods-enabled
sudo ln -s ../mods-available/userdir.load userdir.load
sudo ln -s ../mods-available/userdir.conf userdir.conf
#+end_src

I perfer using "htdocs" rather than "public_html", because
it's shorter to type, and the "_html" looks like an ugly
bump when looking at the directory.  Seriously, it /is/
shorter to type.

#+begin_src sh
sudo emacs -nw ./userdir.conf
#+end_src

And change the two instances of "public_html" with "htdocs"

#+begin_src sh
<IfModule mod_userdir.c>
        UserDir htdocs
        UserDir disabled root

        <Directory /home/*/htdocs>
                AllowOverride FileInfo AuthConfig Limit Indexes
                Options MultiViews Indexes SymLinksIfOwnerMatch IncludesNoExec
                <Limit GET POST OPTIONS>
                        Require all granted
                </Limit>
                <LimitExcept GET POST OPTIONS>
                        Require all denied
                </LimitExcept>
        </Directory>
</IfModule>
#+end_src

Save, exit and restart apache.

#+begin_src sh
sudo /etc/init.d/apache2 restart
#+end_src

Files can now be accessed at http://localhost/~deerpig/  --
remember to include the ~.
